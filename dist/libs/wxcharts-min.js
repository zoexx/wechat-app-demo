/*
 * charts for WeChat small app v1.0
 *
 * https://github.com/xiaolin3303/wx-charts
 * 2016-11-28
 *
 * Designed and built with all the love of Web
 */

"use strict";
function assign(t, e) {
  if (null == t) throw new TypeError("Cannot convert undefined or null to object");for (var i = Object(t), a = 1; a < arguments.length; a++) {
    var n = arguments[a];if (null != n) for (var o in n) {
      Object.prototype.hasOwnProperty.call(n, o) && (i[o] = n[o]);
    }
  }return i;
}function findRange(t, e, i) {
  if (isNaN(t)) throw new Error("[wxCharts] unvalid series data!");i = i || 10, e = e ? e : "upper";for (var a = 1; i < 1;) {
    i *= 10, a *= 10;
  }for (t = "upper" === e ? Math.ceil(t * a) : Math.floor(t * a); t % i !== 0;) {
    "upper" === e ? t++ : t--;
  }return t / a;
}function calRotateTranslate(t, e, i) {
  var a = t,
      n = i - e,
      o = a + (i - n - a) / Math.sqrt(2);o *= -1;var r = (i - n) * (Math.sqrt(2) - 1) - (i - n - a) / Math.sqrt(2);return { transX: o, transY: r };
}function createCurveControlPoints(t, e) {
  var i = .2,
      a = .2,
      n = null,
      o = null,
      r = null,
      s = null;if (e < 1 ? (n = t[0].x + (t[1].x - t[0].x) * i, o = t[0].y + (t[1].y - t[0].y) * i) : (n = t[e].x + (t[e + 1].x - t[e - 1].x) * i, o = t[e].y + (t[e + 1].y - t[e - 1].y) * i), e > t.length - 3) {
    var l = t.length - 1;r = t[l].x - (t[l].x - t[l - 1].x) * a, s = t[l].y - (t[l].y - t[l - 1].y) * a;
  } else r = t[e + 1].x - (t[e + 2].x - t[e].x) * a, s = t[e + 1].y - (t[e + 2].y - t[e].y) * a;return { ctrA: { x: n, y: o }, ctrB: { x: r, y: s } };
}function convertCoordinateOrigin(t, e, i) {
  return { x: i.x + t, y: i.y - e };
}function avoidCollision(t, e) {
  if (e) for (; util.isCollision(t, e);) {
    t.start.x > 0 ? t.start.y-- : t.start.x < 0 ? t.start.y++ : t.start.y > 0 ? t.start.y++ : t.start.y--;
  }return t;
}function fillSeriesColor(t, e) {
  var i = 0;return t.map(function (t) {
    return t.color || (t.color = e.colors[i], i = (i + 1) % e.colors.length), t;
  });
}function getDataRange(t, e) {
  var i = 0,
      a = e - t;return i = a >= 1e4 ? 1e3 : a >= 1e3 ? 100 : a >= 100 ? 10 : a >= 10 ? 5 : a >= 1 ? 1 : a >= .1 ? .1 : .01, { minRange: findRange(t, "lower", i), maxRange: findRange(e, "upper", i) };
}function measureText(t) {
  var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;t = String(t);var t = t.split(""),
      i = 0;return t.forEach(function (t) {
    i += /[a-zA-Z]/.test(t) ? 7 : /[0-9]/.test(t) ? 5.5 : /\./.test(t) ? 2.7 : /-/.test(t) ? 3.25 : /[\u4e00-\u9fa5]/.test(t) ? 10 : /\(|\)/.test(t) ? 3.73 : /\s/.test(t) ? 2.5 : /%/.test(t) ? 8 : 10;
  }), i * e / 10;
}function dataCombine(t) {
  return t.reduce(function (t, e) {
    return (t.data ? t.data : t).concat(e.data);
  }, []);
}function getSeriesDataItem(t, e) {
  var i = [];return t.forEach(function (t) {
    if (null !== t.data[e] && "undefinded" != typeof t.data[e]) {
      var a = {};a.color = t.color, a.name = t.name, a.data = t.format ? t.format(t.data[e]) : t.data[e], i.push(a);
    }
  }), i;
}function getMaxTextListLength(t) {
  var e = t.map(function (t) {
    return measureText(t);
  });return Math.max.apply(null, e);
}function getRadarCoordinateSeries(t) {
  for (var e = 2 * Math.PI / t, i = [], a = 0; a < t; a++) {
    i.push(e * a);
  }return i.map(function (t) {
    return -1 * t + Math.PI / 2;
  });
}function getToolTipData(t, e, i) {
  var a = t.map(function (t) {
    return { text: t.name + ": " + t.data, color: t.color };
  }),
      n = [],
      o = { x: 0, y: 0 };return e.forEach(function (t) {
    "undefinded" != typeof t[i] && null !== t[i] && n.push(t[i]);
  }), n.forEach(function (t) {
    o.x = Math.round(t.x), o.y += t.y;
  }), o.y /= n.length, { textList: a, offset: o };
}function findCurrentIndex(t, e, i, a) {
  var n = -1;return isInExactChartArea(t, i, a) && e.forEach(function (e, i) {
    t.x > e && (n = i);
  }), n;
}function isInExactChartArea(t, e, i) {
  return t.x < e.width - i.padding && t.x > i.padding + i.yAxisWidth + i.yAxisTitleWidth && t.y > i.padding && t.y < e.height - i.legendHeight - i.xAxisHeight - i.padding;
}function findRadarChartCurrentIndex(t, e, i) {
  var a = 2 * Math.PI / i,
      n = -1;return isInExactPieChartArea(t, e.center, e.radius) && !function () {
    var i = function i(t) {
      return t < 0 && (t += 2 * Math.PI), t > 2 * Math.PI && (t -= 2 * Math.PI), t;
    },
        o = Math.atan2(e.center.y - t.y, t.x - e.center.x);o *= -1, o < 0 && (o += 2 * Math.PI);var r = e.angleList.map(function (t) {
      return t = i(-1 * t);
    });r.forEach(function (t, e) {
      var r = i(t - a / 2),
          s = i(t + a / 2);s < r && (s += 2 * Math.PI), (o >= r && o <= s || o + 2 * Math.PI >= r && o + 2 * Math.PI <= s) && (n = e);
    });
  }(), n;
}function findPieChartCurrentIndex(t, e) {
  var i = -1;return isInExactPieChartArea(t, e.center, e.radius) && !function () {
    var a = Math.atan2(e.center.y - t.y, t.x - e.center.x);a < 0 && (a += 2 * Math.PI), a = 2 * Math.PI - a, e.series.forEach(function (t, e) {
      a > t._start_ && (i = e);
    });
  }(), i;
}function isInExactPieChartArea(t, e, i) {
  return Math.pow(t.x - e.x, 2) + Math.pow(t.y - e.y, 2) <= Math.pow(i, 2);
}function splitPoints(t) {
  var e = [],
      i = [];return t.forEach(function (t, a) {
    null !== t ? i.push(t) : (i.length && e.push(i), i = []);
  }), i.length && e.push(i), e;
}function calLegendData(t, e, i) {
  if (e.legend === !1) return { legendList: [], legendHeight: 0 };var a = 5,
      n = 8,
      o = 15,
      r = [],
      s = 0,
      l = [];return t.forEach(function (t) {
    var i = 3 * a + o + measureText(t.name || "undefinded");s + i > e.width ? (r.push(l), s = i, l = [t]) : (s += i, l.push(t));
  }), l.length && r.push(l), { legendList: r, legendHeight: r.length * (i.fontSize + n) + a };
}function calCategoriesData(t, e, i) {
  var a = { angle: 0, xAxisHeight: i.xAxisHeight },
      n = getXAxisPoints(t, e, i),
      o = n.eachSpacing,
      r = t.map(function (t) {
    return measureText(t);
  }),
      s = Math.max.apply(this, r);return s + 2 * i.xAxisTextPadding > o && (a.angle = 45 * Math.PI / 180, a.xAxisHeight = 2 * i.xAxisTextPadding + s * Math.sin(a.angle)), a;
}function getRadarDataPoints(t, e, i, a, n) {
  var o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 1,
      r = n.extra.radar || {};r.max = r.max || 0;var s = Math.max(r.max, Math.max.apply(null, dataCombine(a))),
      l = [];return a.forEach(function (a) {
    var n = {};n.color = a.color, n.data = [], a.data.forEach(function (a, r) {
      var l = {};l.angle = t[r], l.proportion = a / s, l.position = convertCoordinateOrigin(i * l.proportion * o * Math.cos(l.angle), i * l.proportion * o * Math.sin(l.angle), e), n.data.push(l);
    }), l.push(n);
  }), l;
}function getPieDataPoints(t) {
  var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1,
      i = 0,
      a = 0;return t.forEach(function (t) {
    t.data = null === t.data ? 0 : t.data, i += t.data;
  }), t.forEach(function (t) {
    t.data = null === t.data ? 0 : t.data, t._proportion_ = t.data / i * e;
  }), t.forEach(function (t) {
    t._start_ = a, a += 2 * t._proportion_ * Math.PI;
  }), t;
}function getPieTextMaxLength(t) {
  t = getPieDataPoints(t);var e = 0;return t.forEach(function (t) {
    var i = t.format ? t.format(+t._proportion_.toFixed(2)) : util.toFixed(100 * t._proportion_) + "%";e = Math.max(e, measureText(i));
  }), e;
}function fixColumeData(t, e, i, a, n, o) {
  return t.map(function (t) {
    return null === t ? null : (t.width = (e - 2 * n.columePadding) / i, o.extra.column && o.extra.column.width && +o.extra.column.width > 0 ? t.width = Math.min(t.width, +o.extra.column.width) : t.width = Math.min(t.width, 25), t.x += (a + .5 - i / 2) * t.width, t);
  });
}function getXAxisPoints(t, e, i) {
  var a = i.yAxisWidth + i.yAxisTitleWidth,
      n = e.width - 2 * i.padding - a,
      o = n / t.length,
      r = [],
      s = i.padding + a,
      l = e.width - i.padding;return t.forEach(function (t, e) {
    r.push(s + e * o);
  }), r.push(l), { xAxisPoints: r, startX: s, endX: l, eachSpacing: o };
}function getDataPoints(t, e, i, a, n, o, r) {
  var s = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 1,
      l = [],
      h = o.height - 2 * r.padding - r.xAxisHeight - r.legendHeight;return t.forEach(function (t, c) {
    if (null === t) l.push(null);else {
      var d = {};d.x = a[c] + Math.round(n / 2);var x = h * (t - e) / (i - e);x *= s, d.y = o.height - r.xAxisHeight - r.legendHeight - Math.round(x) - r.padding, l.push(d);
    }
  }), l;
}function getYAxisTextList(t, e, i) {
  var a = dataCombine(t);a = a.filter(function (t) {
    return null !== t;
  });var n = Math.min.apply(this, a),
      o = Math.max.apply(this, a);if ("number" == typeof e.yAxis.min && (n = Math.min(e.yAxis.min, n)), "number" == typeof e.yAxis.max && (o = Math.max(e.yAxis.max, o)), n === o) {
    var r = o || 1;n -= r, o += r;
  }for (var s = getDataRange(n, o), l = s.minRange, h = s.maxRange, c = [], d = (h - l) / i.yAxisSplit, x = 0; x <= i.yAxisSplit; x++) {
    c.push(l + d * x);
  }return c.reverse();
}function calYAxisData(t, e, i) {
  var a = getYAxisTextList(t, e, i),
      n = i.yAxisWidth,
      o = a.map(function (t) {
    return t = util.toFixed(t, 2), t = e.yAxis.format ? e.yAxis.format(Number(t)) : t, n = Math.max(n, measureText(t) + 5), t;
  });return e.yAxis.disabled === !0 && (n = 0), { rangesFormat: o, ranges: a, yAxisWidth: n };
}function drawPointShape(t, e, i, a) {
  a.beginPath(), a.setStrokeStyle("#ffffff"), a.setLineWidth(1), a.setFillStyle(e), "diamond" === i ? t.forEach(function (t, e) {
    null !== t && (a.moveTo(t.x, t.y - 4.5), a.lineTo(t.x - 4.5, t.y), a.lineTo(t.x, t.y + 4.5), a.lineTo(t.x + 4.5, t.y), a.lineTo(t.x, t.y - 4.5));
  }) : "circle" === i ? t.forEach(function (t, e) {
    null !== t && (a.moveTo(t.x + 3.5, t.y), a.arc(t.x, t.y, 4, 0, 2 * Math.PI, !1));
  }) : "rect" === i ? t.forEach(function (t, e) {
    null !== t && (a.moveTo(t.x - 3.5, t.y - 3.5), a.rect(t.x - 3.5, t.y - 3.5, 7, 7));
  }) : "triangle" === i && t.forEach(function (t, e) {
    null !== t && (a.moveTo(t.x, t.y - 4.5), a.lineTo(t.x - 4.5, t.y + 4.5), a.lineTo(t.x + 4.5, t.y + 4.5), a.lineTo(t.x, t.y - 4.5));
  }), a.closePath(), a.fill(), a.stroke();
}function drawRingTitle(t, e, i) {
  var a = t.title.fontSize || e.titleFontSize,
      n = t.subtitle.fontSize || e.subtitleFontSize,
      o = t.title.name || "",
      r = t.subtitle.name || "",
      s = t.title.color || e.titleColor,
      l = t.subtitle.color || e.subtitleColor,
      h = o ? a : 0,
      c = r ? n : 0,
      d = 5;if (r) {
    var x = measureText(r, n),
        f = (t.width - x) / 2 + (t.subtitle.offsetX || 0),
        u = (t.height - e.legendHeight + n) / 2;o && (u -= (h + d) / 2), i.beginPath(), i.setFontSize(n), i.setFillStyle(l), i.fillText(r, f, u), i.stroke(), i.closePath();
  }if (o) {
    var g = measureText(o, a),
        p = (t.width - g) / 2 + (t.title.offsetX || 0),
        y = (t.height - e.legendHeight + a) / 2;r && (y += (c + d) / 2), i.beginPath(), i.setFontSize(a), i.setFillStyle(s), i.fillText(o, p, y), i.stroke(), i.closePath();
  }
}function drawPointText(t, e, i, a) {
  var n = e.data;a.beginPath(), a.setFontSize(i.fontSize), a.setFillStyle("#666666"), t.forEach(function (t, i) {
    if (null !== t) {
      var o = e.format ? e.format(n[i]) : n[i];a.fillText(o, t.x - measureText(o) / 2, t.y - 2);
    }
  }), a.closePath(), a.stroke();
}function drawRadarLabel(t, e, i, a, n, o) {
  var r = a.extra.radar || {};e += n.radarLabelTextMargin, o.beginPath(), o.setFontSize(n.fontSize), o.setFillStyle(r.labelColor || "#666666"), t.forEach(function (t, r) {
    var s = { x: e * Math.cos(t), y: e * Math.sin(t) },
        l = convertCoordinateOrigin(s.x, s.y, i),
        h = l.x,
        c = l.y;util.approximatelyEqual(s.x, 0) ? h -= measureText(a.categories[r] || "") / 2 : s.x < 0 && (h -= measureText(a.categories[r] || "")), o.fillText(a.categories[r] || "", h, c + n.fontSize / 2);
  }), o.stroke(), o.closePath();
}function drawPieText(t, e, i, a, n, o) {
  var r = n + i.pieChartLinePadding,
      s = (r + i.pieChartTextPadding, []),
      l = null,
      h = t.map(function (t) {
    var e = 2 * Math.PI - (t._start_ + 2 * Math.PI * t._proportion_ / 2),
        i = t.format ? t.format(+t._proportion_.toFixed(2)) : util.toFixed(100 * t._proportion_) + "%",
        a = t.color;return { arc: e, text: i, color: a };
  });h.forEach(function (t) {
    var e = Math.cos(t.arc) * r,
        a = Math.sin(t.arc) * r,
        o = Math.cos(t.arc) * n,
        h = Math.sin(t.arc) * n,
        c = e >= 0 ? e + i.pieChartTextPadding : e - i.pieChartTextPadding,
        d = a,
        x = measureText(t.text),
        f = d;l && util.isSameXCoordinateArea(l.start, { x: c }) && (f = c > 0 ? Math.min(d, l.start.y) : e < 0 ? Math.max(d, l.start.y) : d > 0 ? Math.max(d, l.start.y) : Math.min(d, l.start.y)), c < 0 && (c -= x);var u = { lineStart: { x: o, y: h }, lineEnd: { x: e, y: a }, start: { x: c, y: f }, width: x, height: i.fontSize, text: t.text, color: t.color };l = avoidCollision(u, l), s.push(l);
  }), s.forEach(function (t) {
    var e = convertCoordinateOrigin(t.lineStart.x, t.lineStart.y, o),
        n = convertCoordinateOrigin(t.lineEnd.x, t.lineEnd.y, o),
        r = convertCoordinateOrigin(t.start.x, t.start.y, o);a.setLineWidth(1), a.setFontSize(i.fontSize), a.beginPath(), a.setStrokeStyle(t.color), a.setFillStyle(t.color), a.moveTo(e.x, e.y);var s = t.start.x < 0 ? r.x + t.width : r.x,
        l = t.start.x < 0 ? r.x - 5 : r.x + 5;a.quadraticCurveTo(n.x, n.y, s, r.y), a.moveTo(e.x, e.y), a.stroke(), a.closePath(), a.beginPath(), a.moveTo(r.x + t.width, r.y), a.arc(s, r.y, 2, 0, 2 * Math.PI), a.closePath(), a.fill(), a.beginPath(), a.setFillStyle("#666666"), a.fillText(t.text, l, r.y + 3), a.closePath(), a.stroke(), a.closePath();
  });
}function drawToolTipSplitLine(t, e, i, a) {
  var n = i.padding,
      o = e.height - i.padding - i.xAxisHeight - i.legendHeight;a.beginPath(), a.setStrokeStyle("#cccccc"), a.setLineWidth(1), a.moveTo(t, n), a.lineTo(t, o), a.stroke(), a.closePath();
}function drawToolTip(t, e, i, a, n) {
  var o = 4,
      r = 5,
      s = 8,
      l = !1;e = assign({ x: 0, y: 0 }, e), e.y -= 8;var h = t.map(function (t) {
    return measureText(t.text);
  }),
      c = o + r + 4 * a.toolTipPadding + Math.max.apply(null, h),
      d = 2 * a.toolTipPadding + t.length * a.toolTipLineHeight;e.x + s + c > i.width && (l = !0), n.beginPath(), n.setFillStyle(i.tooltip.option.background || a.toolTipBackground), n.setGlobalAlpha(a.toolTipOpacity), l ? (n.moveTo(e.x, e.y + 10), n.lineTo(e.x - s, e.y + 10 - 5), n.lineTo(e.x - s, e.y + 10 + 5), n.moveTo(e.x, e.y + 10), n.fillRect(e.x - c - s, e.y, c, d)) : (n.moveTo(e.x, e.y + 10), n.lineTo(e.x + s, e.y + 10 - 5), n.lineTo(e.x + s, e.y + 10 + 5), n.moveTo(e.x, e.y + 10), n.fillRect(e.x + s, e.y, c, d)), n.closePath(), n.fill(), n.setGlobalAlpha(1), t.forEach(function (t, i) {
    n.beginPath(), n.setFillStyle(t.color);var r = e.x + s + 2 * a.toolTipPadding,
        h = e.y + (a.toolTipLineHeight - a.fontSize) / 2 + a.toolTipLineHeight * i + a.toolTipPadding;l && (r = e.x - c - s + 2 * a.toolTipPadding), n.fillRect(r, h, o, a.fontSize), n.closePath();
  }), n.beginPath(), n.setFontSize(a.fontSize), n.setFillStyle("#ffffff"), t.forEach(function (t, i) {
    var h = e.x + s + 2 * a.toolTipPadding + o + r;l && (h = e.x - c - s + 2 * a.toolTipPadding + +o + r);var d = e.y + (a.toolTipLineHeight - a.fontSize) / 2 + a.toolTipLineHeight * i + a.toolTipPadding;n.fillText(t.text, h, d + a.fontSize);
  }), n.stroke(), n.closePath();
}function drawYAxisTitle(t, e, i, a) {
  var n = i.xAxisHeight + (e.height - i.xAxisHeight - measureText(t)) / 2;a.save(), a.beginPath(), a.setFontSize(i.fontSize), a.setFillStyle(e.yAxis.titleFontColor || "#333333"), a.translate(0, e.height), a.rotate(-90 * Math.PI / 180), a.fillText(t, n, i.padding + .5 * i.fontSize), a.stroke(), a.closePath(), a.restore();
}function drawColumnDataPoints(t, e, i, a) {
  var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1,
      o = calYAxisData(t, e, i),
      r = o.ranges,
      s = getXAxisPoints(e.categories, e, i),
      l = s.xAxisPoints,
      h = s.eachSpacing,
      c = r.pop(),
      d = r.shift();e.height - i.padding - i.xAxisHeight - i.legendHeight;return t.forEach(function (o, r) {
    var s = o.data,
        x = getDataPoints(s, c, d, l, h, e, i, n);x = fixColumeData(x, h, t.length, r, i, e), a.beginPath(), a.setFillStyle(o.color), x.forEach(function (t, n) {
      if (null !== t) {
        var o = t.x - t.width / 2 + 1,
            r = e.height - t.y - i.padding - i.xAxisHeight - i.legendHeight;a.moveTo(o, t.y), a.rect(o, t.y, t.width - 2, r);
      }
    }), a.closePath(), a.fill();
  }), t.forEach(function (o, r) {
    var s = o.data,
        x = getDataPoints(s, c, d, l, h, e, i, n);x = fixColumeData(x, h, t.length, r, i, e), e.dataLabel !== !1 && 1 === n && drawPointText(x, o, i, a);
  }), l;
}function drawAreaDataPoints(t, e, i, a) {
  var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1,
      o = calYAxisData(t, e, i),
      r = o.ranges,
      s = getXAxisPoints(e.categories, e, i),
      l = s.xAxisPoints,
      h = s.eachSpacing,
      c = r.pop(),
      d = r.shift(),
      x = e.height - i.padding - i.xAxisHeight - i.legendHeight,
      f = [];return e.tooltip && e.tooltip.textList && e.tooltip.textList.length && 1 === n && drawToolTipSplitLine(e.tooltip.offset.x, e, i, a), t.forEach(function (t, o) {
    var r = t.data,
        s = getDataPoints(r, c, d, l, h, e, i, n);f.push(s);var u = splitPoints(s);if (u.forEach(function (i) {
      if (a.beginPath(), a.setStrokeStyle(t.color), a.setFillStyle(t.color), a.setGlobalAlpha(.6), a.setLineWidth(2), i.length > 1) {
        var n = i[0],
            o = i[i.length - 1];a.moveTo(n.x, n.y), "curve" === e.extra.lineStyle ? i.forEach(function (t, e) {
          if (e > 0) {
            var n = createCurveControlPoints(i, e - 1);a.bezierCurveTo(n.ctrA.x, n.ctrA.y, n.ctrB.x, n.ctrB.y, t.x, t.y);
          }
        }) : i.forEach(function (t, e) {
          e > 0 && a.lineTo(t.x, t.y);
        }), a.lineTo(o.x, x), a.lineTo(n.x, x), a.lineTo(n.x, n.y);
      } else {
        var r = i[0];a.moveTo(r.x - h / 2, r.y), a.lineTo(r.x + h / 2, r.y), a.lineTo(r.x + h / 2, x), a.lineTo(r.x - h / 2, x), a.moveTo(r.x - h / 2, r.y);
      }a.closePath(), a.fill(), a.setGlobalAlpha(1);
    }), e.dataPointShape !== !1) {
      var g = i.dataPointShape[o % i.dataPointShape.length];drawPointShape(s, t.color, g, a);
    }
  }), e.dataLabel !== !1 && 1 === n && t.forEach(function (t, o) {
    var r = t.data,
        s = getDataPoints(r, c, d, l, h, e, i, n);drawPointText(s, t, i, a);
  }), e.tooltip && e.tooltip.textList && e.tooltip.textList.length && 1 === n && drawToolTip(e.tooltip.textList, e.tooltip.offset, e, i, a), { xAxisPoints: l, calPoints: f };
}function drawLineDataPoints(t, e, i, a) {
  var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1,
      o = calYAxisData(t, e, i),
      r = o.ranges,
      s = getXAxisPoints(e.categories, e, i),
      l = s.xAxisPoints,
      h = s.eachSpacing,
      c = r.pop(),
      d = r.shift(),
      x = [];return e.tooltip && e.tooltip.textList && e.tooltip.textList.length && 1 === n && drawToolTipSplitLine(e.tooltip.offset.x, e, i, a), t.forEach(function (t, o) {
    var r = t.data,
        s = getDataPoints(r, c, d, l, h, e, i, n);x.push(s);var f = splitPoints(s);if (f.forEach(function (i, n) {
      a.beginPath(), a.setStrokeStyle(t.color), a.setLineWidth(2), 1 === i.length ? (a.moveTo(i[0].x, i[0].y), a.arc(i[0].x, i[0].y, 1, 0, 2 * Math.PI)) : (a.moveTo(i[0].x, i[0].y), "curve" === e.extra.lineStyle ? i.forEach(function (t, e) {
        if (e > 0) {
          var n = createCurveControlPoints(i, e - 1);a.bezierCurveTo(n.ctrA.x, n.ctrA.y, n.ctrB.x, n.ctrB.y, t.x, t.y);
        }
      }) : i.forEach(function (t, e) {
        e > 0 && a.lineTo(t.x, t.y);
      }), a.moveTo(i[0].x, i[0].y)), a.closePath(), a.stroke();
    }), e.dataPointShape !== !1) {
      var u = i.dataPointShape[o % i.dataPointShape.length];drawPointShape(s, t.color, u, a);
    }
  }), e.dataLabel !== !1 && 1 === n && t.forEach(function (t, o) {
    var r = t.data,
        s = getDataPoints(r, c, d, l, h, e, i, n);drawPointText(s, t, i, a);
  }), e.tooltip && e.tooltip.textList && e.tooltip.textList.length && 1 === n && drawToolTip(e.tooltip.textList, e.tooltip.offset, e, i, a), { xAxisPoints: l, calPoints: x };
}function drawXAxis(t, e, i, a) {
  var n = getXAxisPoints(t, e, i),
      o = n.xAxisPoints,
      r = n.startX,
      s = n.endX,
      l = n.eachSpacing,
      h = e.height - i.padding - i.xAxisHeight - i.legendHeight,
      c = h + i.xAxisLineHeight;a.beginPath(), a.setStrokeStyle(e.xAxis.gridColor || "#cccccc"), a.setLineWidth(1), a.moveTo(r, h), a.lineTo(s, h), e.xAxis.disableGrid !== !0 && ("calibration" === e.xAxis.type ? o.forEach(function (t, e) {
    e > 0 && (a.moveTo(t - l / 2, h), a.lineTo(t - l / 2, h + 4));
  }) : o.forEach(function (t, e) {
    a.moveTo(t, h), a.lineTo(t, c);
  })), a.closePath(), a.stroke();var d = e.width - 2 * i.padding - i.yAxisWidth - i.yAxisTitleWidth,
      x = Math.min(t.length, Math.ceil(d / i.fontSize / 1.5)),
      f = Math.ceil(t.length / x);t = t.map(function (t, e) {
    return e % f !== 0 ? "" : t;
  }), 0 === i._xAxisTextAngle_ ? (a.beginPath(), a.setFontSize(i.fontSize), a.setFillStyle(e.xAxis.fontColor || "#666666"), t.forEach(function (t, e) {
    var n = l / 2 - measureText(t) / 2;a.fillText(t, o[e] + n, h + i.fontSize + 5);
  }), a.closePath(), a.stroke()) : t.forEach(function (t, n) {
    a.save(), a.beginPath(), a.setFontSize(i.fontSize), a.setFillStyle(e.xAxis.fontColor || "#666666");var r = measureText(t),
        s = l / 2 - r,
        c = calRotateTranslate(o[n] + l / 2, h + i.fontSize / 2 + 5, e.height),
        d = c.transX,
        x = c.transY;a.rotate(-1 * i._xAxisTextAngle_), a.translate(d, x), a.fillText(t, o[n] + s, h + i.fontSize + 5), a.closePath(), a.stroke(), a.restore();
  });
}function drawYAxis(t, e, i, a) {
  if (e.yAxis.disabled !== !0) {
    for (var n = calYAxisData(t, e, i), o = n.rangesFormat, r = i.yAxisWidth + i.yAxisTitleWidth, s = e.height - 2 * i.padding - i.xAxisHeight - i.legendHeight, l = Math.floor(s / i.yAxisSplit), h = i.padding + r, c = e.width - i.padding, d = (i.padding, e.height - i.padding - i.xAxisHeight - i.legendHeight), x = [], f = 0; f < i.yAxisSplit; f++) {
      x.push(i.padding + l * f);
    }a.beginPath(), a.setStrokeStyle(e.yAxis.gridColor || "#cccccc"), a.setLineWidth(1), x.forEach(function (t, e) {
      a.moveTo(h, t), a.lineTo(c, t);
    }), a.closePath(), a.stroke(), a.beginPath(), a.setFontSize(i.fontSize), a.setFillStyle(e.yAxis.fontColor || "#666666"), o.forEach(function (t, e) {
      var n = x[e] ? x[e] : d;a.fillText(t, i.padding + i.yAxisTitleWidth, n + i.fontSize / 2);
    }), a.closePath(), a.stroke(), e.yAxis.title && drawYAxisTitle(e.yAxis.title, e, i, a);
  }
}function drawLegend(t, e, i, a) {
  if (e.legend) {
    var n = calLegendData(t, e, i),
        o = n.legendList,
        r = (n.legendHeight, 5),
        s = 8,
        l = 15;o.forEach(function (t, n) {
      var o = 0;t.forEach(function (t) {
        t.name = t.name || "undefined", o += 3 * r + measureText(t.name) + l;
      });var h = (e.width - o) / 2 + r,
          c = e.height - i.padding - i.legendHeight + n * (i.fontSize + s) + r + s;a.setFontSize(i.fontSize), t.forEach(function (t) {
        switch (e.type) {case "line":
            a.beginPath(), a.setLineWidth(1), a.setStrokeStyle(t.color), a.moveTo(h - 2, c + 5), a.lineTo(h + 17, c + 5), a.stroke(), a.closePath(), a.beginPath(), a.setLineWidth(1), a.setStrokeStyle("#ffffff"), a.setFillStyle(t.color), a.moveTo(h + 7.5, c + 5), a.arc(h + 7.5, c + 5, 4, 0, 2 * Math.PI), a.fill(), a.stroke(), a.closePath();break;case "pie":case "ring":
            a.beginPath(), a.setFillStyle(t.color), a.moveTo(h + 7.5, c + 5), a.arc(h + 7.5, c + 5, 7, 0, 2 * Math.PI), a.closePath(), a.fill();break;default:
            a.beginPath(), a.setFillStyle(t.color), a.moveTo(h, c), a.rect(h, c, 15, 10), a.closePath(), a.fill();}h += r + l, a.beginPath(), a.setFillStyle(e.extra.legendTextColor || "#333333"), a.fillText(t.name, h, c + 9), a.closePath(), a.stroke(), h += measureText(t.name) + 2 * r;
      });
    });
  }
}function drawPieDataPoints(t, e, i, a) {
  var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;t = getPieDataPoints(t, n);var o = { x: e.width / 2, y: (e.height - i.legendHeight) / 2 },
      r = Math.min(o.x - i.pieChartLinePadding - i.pieChartTextPadding - i._pieTextMaxLength_, o.y - i.pieChartLinePadding - i.pieChartTextPadding);if (r -= e.dataLabel ? 10 : 2 * i.padding, t.forEach(function (t) {
    a.beginPath(), a.setLineWidth(2), a.setStrokeStyle("#ffffff"), a.setFillStyle(t.color), a.moveTo(o.x, o.y), a.arc(o.x, o.y, r, t._start_, t._start_ + 2 * t._proportion_ * Math.PI), a.closePath(), a.fill(), e.disablePieStroke !== !0 && a.stroke();
  }), "ring" === e.type) {
    var s = .6 * r;"number" == typeof e.extra.ringWidth && e.extra.ringWidth > 0 && (s = Math.max(0, r - e.extra.ringWidth)), a.beginPath(), a.setFillStyle("#ffffff"), a.moveTo(o.x, o.y), a.arc(o.x, o.y, s, 0, 2 * Math.PI), a.closePath(), a.fill();
  }return e.dataLabel !== !1 && 1 === n && drawPieText(t, e, i, a, r, o), 1 === n && "ring" === e.type && drawRingTitle(e, i, a), { center: o, radius: r, series: t };
}function drawRadarDataPoints(t, e, i, a) {
  var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1,
      o = e.extra.radar || {},
      r = getRadarCoordinateSeries(e.categories.length),
      s = { x: e.width / 2, y: (e.height - i.legendHeight) / 2 },
      l = Math.min(s.x - (getMaxTextListLength(e.categories) + i.radarLabelTextMargin), s.y - i.radarLabelTextMargin);l -= i.padding, a.beginPath(), a.setLineWidth(1), a.setStrokeStyle(o.gridColor || "#cccccc"), r.forEach(function (t) {
    var e = convertCoordinateOrigin(l * Math.cos(t), l * Math.sin(t), s);a.moveTo(s.x, s.y), a.lineTo(e.x, e.y);
  }), a.stroke(), a.closePath();for (var h = function h(t) {
    var e = {};a.beginPath(), a.setLineWidth(1), a.setStrokeStyle(o.gridColor || "#cccccc"), r.forEach(function (n, o) {
      var r = convertCoordinateOrigin(l / i.radarGridCount * t * Math.cos(n), l / i.radarGridCount * t * Math.sin(n), s);0 === o ? (e = r, a.moveTo(r.x, r.y)) : a.lineTo(r.x, r.y);
    }), a.lineTo(e.x, e.y), a.stroke(), a.closePath();
  }, c = 1; c <= i.radarGridCount; c++) {
    h(c);
  }var d = getRadarDataPoints(r, s, l, t, e, n);return d.forEach(function (t, n) {
    if (a.beginPath(), a.setFillStyle(t.color), a.setGlobalAlpha(.6), t.data.forEach(function (t, e) {
      0 === e ? a.moveTo(t.position.x, t.position.y) : a.lineTo(t.position.x, t.position.y);
    }), a.closePath(), a.fill(), a.setGlobalAlpha(1), e.dataPointShape !== !1) {
      var o = i.dataPointShape[n % i.dataPointShape.length],
          r = t.data.map(function (t) {
        return t.position;
      });drawPointShape(r, t.color, o, a);
    }
  }), drawRadarLabel(r, l, s, e, i, a), { center: s, radius: l, angleList: r };
}function drawCanvas(t, e) {
  e.draw();
}function Animation(t) {
  this.isStop = !1, t.duration = "undefined" == typeof t.duration ? 1e3 : t.duration, t.timing = t.timing || "linear";var e = 17,
      i = function i() {
    return "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : "undefined" != typeof setTimeout ? function (t, e) {
      setTimeout(function () {
        var e = +new Date();t(e);
      }, e);
    } : function (t) {
      t(null);
    };
  },
      a = i(),
      n = null,
      _o = function o(i) {
    if (null === i || this.isStop === !0) return t.onProcess && t.onProcess(1), void (t.onAnimationFinish && t.onAnimationFinish());if (null === n && (n = i), i - n < t.duration) {
      var r = (i - n) / t.duration,
          s = Timing[t.timing];r = s(r), t.onProcess && t.onProcess(r), a(_o, e);
    } else t.onProcess && t.onProcess(1), t.onAnimationFinish && t.onAnimationFinish();
  };_o = _o.bind(this), a(_o, e);
}function drawCharts(t, e, i, a) {
  var n = this,
      o = e.series,
      r = e.categories;o = fillSeriesColor(o, i);var s = calLegendData(o, e, i),
      l = s.legendHeight;i.legendHeight = l;var h = calYAxisData(o, e, i),
      c = h.yAxisWidth;if (i.yAxisWidth = c, r && r.length) {
    var d = calCategoriesData(r, e, i),
        x = d.xAxisHeight,
        f = d.angle;i.xAxisHeight = x, i._xAxisTextAngle_ = f;
  }"pie" !== t && "ring" !== t || (i._pieTextMaxLength_ = e.dataLabel === !1 ? 0 : getPieTextMaxLength(o));var u = e.animation ? 1e3 : 0;switch (this.animationInstance && this.animationInstance.stop(), t) {case "line":
      this.animationInstance = new Animation({ timing: "easeIn", duration: u, onProcess: function onProcess(t) {
          drawYAxis(o, e, i, a), drawXAxis(r, e, i, a);var s = drawLineDataPoints(o, e, i, a, t),
              l = s.xAxisPoints,
              h = s.calPoints;n.chartData.xAxisPoints = l, n.chartData.calPoints = h, drawLegend(e.series, e, i, a), drawCanvas(e, a);
        }, onAnimationFinish: function onAnimationFinish() {
          n.event.trigger("renderComplete");
        } });break;case "column":
      this.animationInstance = new Animation({ timing: "easeIn", duration: u, onProcess: function onProcess(t) {
          drawYAxis(o, e, i, a), drawXAxis(r, e, i, a), n.chartData.xAxisPoints = drawColumnDataPoints(o, e, i, a, t), drawLegend(e.series, e, i, a), drawCanvas(e, a);
        }, onAnimationFinish: function onAnimationFinish() {
          n.event.trigger("renderComplete");
        } });break;case "area":
      this.animationInstance = new Animation({ timing: "easeIn", duration: u, onProcess: function onProcess(t) {
          drawYAxis(o, e, i, a), drawXAxis(r, e, i, a);var s = drawAreaDataPoints(o, e, i, a, t),
              l = s.xAxisPoints,
              h = s.calPoints;n.chartData.xAxisPoints = l, n.chartData.calPoints = h, drawLegend(e.series, e, i, a), drawCanvas(e, a);
        }, onAnimationFinish: function onAnimationFinish() {
          n.event.trigger("renderComplete");
        } });break;case "ring":case "pie":
      this.animationInstance = new Animation({ timing: "easeInOut", duration: u, onProcess: function onProcess(t) {
          n.chartData.pieData = drawPieDataPoints(o, e, i, a, t), drawLegend(e.series, e, i, a), drawCanvas(e, a);
        }, onAnimationFinish: function onAnimationFinish() {
          n.event.trigger("renderComplete");
        } });break;case "radar":
      this.animationInstance = new Animation({ timing: "easeInOut", duration: u, onProcess: function onProcess(t) {
          n.chartData.radarData = drawRadarDataPoints(o, e, i, a, t), drawLegend(e.series, e, i, a), drawCanvas(e, a);
        }, onAnimationFinish: function onAnimationFinish() {
          n.event.trigger("renderComplete");
        } });}
}function Event() {
  this.events = {};
}var config = { yAxisWidth: 15, yAxisSplit: 5, xAxisHeight: 15, xAxisLineHeight: 15, legendHeight: 15, yAxisTitleWidth: 15, padding: 12, columePadding: 3, fontSize: 10, dataPointShape: ["diamond", "circle", "triangle", "rect"], colors: ["#7cb5ec", "#f7a35c", "#434348", "#90ed7d", "#f15c80", "#8085e9"], pieChartLinePadding: 25, pieChartTextPadding: 15, xAxisTextPadding: 3, titleColor: "#333333", titleFontSize: 20, subtitleColor: "#999999", subtitleFontSize: 15, toolTipPadding: 3, toolTipBackground: "#000000", toolTipOpacity: .7, toolTipLineHeight: 14, radarGridCount: 3, radarLabelTextMargin: 15 },
    util = { toFixed: function toFixed(t, e) {
    return e = e || 2, this.isFloat(t) && (t = t.toFixed(e)), t;
  }, isFloat: function isFloat(t) {
    return t % 1 !== 0;
  }, approximatelyEqual: function approximatelyEqual(t, e) {
    return Math.abs(t - e) < 1e-10;
  }, isSameSign: function isSameSign(t, e) {
    return Math.abs(t) === t && Math.abs(e) === e || Math.abs(t) !== t && Math.abs(e) !== e;
  }, isSameXCoordinateArea: function isSameXCoordinateArea(t, e) {
    return this.isSameSign(t.x, e.x);
  }, isCollision: function isCollision(t, e) {
    t.end = {}, t.end.x = t.start.x + t.width, t.end.y = t.start.y - t.height, e.end = {}, e.end.x = e.start.x + e.width, e.end.y = e.start.y - e.height;var i = e.start.x > t.end.x || e.end.x < t.start.x || e.end.y > t.start.y || e.start.y < t.end.y;return !i;
  } },
    Timing = { easeIn: function easeIn(t) {
    return Math.pow(t, 3);
  }, easeOut: function easeOut(t) {
    return Math.pow(t - 1, 3) + 1;
  }, easeInOut: function easeInOut(t) {
    return (t /= .5) < 1 ? .5 * Math.pow(t, 3) : .5 * (Math.pow(t - 2, 3) + 2);
  }, linear: function linear(t) {
    return t;
  } };Animation.prototype.stop = function () {
  this.isStop = !0;
}, Event.prototype.addEventListener = function (t, e) {
  this.events[t] = this.events[t] || [], this.events[t].push(e);
}, Event.prototype.trigger = function () {
  for (var t = arguments.length, e = Array(t), i = 0; i < t; i++) {
    e[i] = arguments[i];
  }var a = e[0],
      n = e.slice(1);this.events[a] && this.events[a].forEach(function (t) {
    try {
      t.apply(null, n);
    } catch (t) {
      console.error(t);
    }
  });
};var Charts = function Charts(t) {
  t.title = t.title || {}, t.subtitle = t.subtitle || {}, t.yAxis = t.yAxis || {}, t.xAxis = t.xAxis || {}, t.extra = t.extra || {}, t.legend = t.legend !== !1, t.animation = t.animation !== !1;var e = assign({}, config);e.yAxisTitleWidth = t.yAxis.disabled !== !0 && t.yAxis.title ? e.yAxisTitleWidth : 0, e.pieChartLinePadding = t.dataLabel === !1 ? 0 : e.pieChartLinePadding, e.pieChartTextPadding = t.dataLabel === !1 ? 0 : e.pieChartTextPadding, this.opts = t, this.config = e, this.context = wx.createCanvasContext(t.canvasId), this.chartData = {}, this.event = new Event(), drawCharts.call(this, t.type, t, e, this.context);
};Charts.prototype.updateData = function () {
  var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};this.opts.series = t.series || this.opts.series, this.opts.categories = t.categories || this.opts.categories, this.opts.title = assign({}, this.opts.title, t.title || {}), this.opts.subtitle = assign({}, this.opts.subtitle, t.subtitle || {}), drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);
}, Charts.prototype.stopAnimation = function () {
  this.animationInstance && this.animationInstance.stop();
}, Charts.prototype.addEventListener = function (t, e) {
  this.event.addEventListener(t, e);
}, Charts.prototype.getCurrentDataIndex = function (t) {
  if (t.touches && t.touches.length) {
    var e = t.touches[0],
        i = e.x,
        a = e.y;return "pie" === this.opts.type || "ring" === this.opts.type ? findPieChartCurrentIndex({ x: i, y: a }, this.chartData.pieData) : "radar" === this.opts.type ? findRadarChartCurrentIndex({ x: i, y: a }, this.chartData.radarData, this.opts.categories.length) : findCurrentIndex({ x: i, y: a }, this.chartData.xAxisPoints, this.opts, this.config);
  }return -1;
}, Charts.prototype.showToolTip = function (t) {
  var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};if ("line" === this.opts.type || "area" === this.opts.type) {
    var i = this.getCurrentDataIndex(t),
        a = assign({}, this.opts, { animation: !1 });if (i > -1) {
      var n = getSeriesDataItem(this.opts.series, i);if (0 === n.length) drawCharts.call(this, a.type, a, this.config, this.context);else {
        var o = getToolTipData(n, this.chartData.calPoints, i),
            r = o.textList,
            s = o.offset;a.tooltip = { textList: r, offset: s, option: e }, drawCharts.call(this, a.type, a, this.config, this.context);
      }
    } else drawCharts.call(this, a.type, a, this.config, this.context);
  }
}, module.exports = Charts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,